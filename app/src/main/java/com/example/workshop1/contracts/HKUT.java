package com.example.workshop1.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 */
@SuppressWarnings("rawtypes")
public class HKUT extends Contract {
    public static final String BINARY = "60c060405234801561001057600080fd5b506040518060400160405280600881526020017f484b55546f6b656e0000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f484b555400000000000000000000000000000000000000000000000000000000815250816003908161008c9190610811565b50806004908161009c9190610811565b5050506100b26000801b3361019060201b60201c565b506100ea336100c561028e60201b60201c565b600a6100d19190610a52565b620f42406100df9190610a9d565b61029760201b60201c565b6100f861031f60201b60201c565b608081815250503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610bd0565b60006101a2838361032960201b60201c565b6102835760016005600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061022061039460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610288565b600090505b92915050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036103095760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016103009190610b20565b60405180910390fd5b61031b6000838361039c60201b60201c565b5050565b6000600254905090565b60006005600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036103ee5780600260008282546103e29190610b3b565b925050819055506104c1565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561047a578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161047193929190610b7e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361050a5780600260008282540392505081905550610557565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105b49190610bb5565b60405180910390a3505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061064257607f821691505b602082108103610655576106546105fb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610680565b6106c78683610680565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061070e610709610704846106df565b6106e9565b6106df565b9050919050565b6000819050919050565b610728836106f3565b61073c61073482610715565b84845461068d565b825550505050565b600090565b610751610744565b61075c81848461071f565b505050565b5b8181101561078057610775600082610749565b600181019050610762565b5050565b601f8211156107c5576107968161065b565b61079f84610670565b810160208510156107ae578190505b6107c26107ba85610670565b830182610761565b50505b505050565b600082821c905092915050565b60006107e8600019846008026107ca565b1980831691505092915050565b600061080183836107d7565b9150826002028217905092915050565b61081a826105c1565b67ffffffffffffffff811115610833576108326105cc565b5b61083d825461062a565b610848828285610784565b600060209050601f83116001811461087b5760008415610869578287015190505b61087385826107f5565b8655506108db565b601f1984166108898661065b565b60005b828110156108b15784890151825560018201915060208501945060208101905061088c565b868310156108ce57848901516108ca601f8916826107d7565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561096957808604811115610945576109446108e3565b5b60018516156109545780820291505b808102905061096285610912565b9450610929565b94509492505050565b6000826109825760019050610a3e565b816109905760009050610a3e565b81600181146109a657600281146109b0576109df565b6001915050610a3e565b60ff8411156109c2576109c16108e3565b5b8360020a9150848211156109d9576109d86108e3565b5b50610a3e565b5060208310610133831016604e8410600b8410161715610a145782820a905083811115610a0f57610a0e6108e3565b5b610a3e565b610a21848484600161091f565b92509050818404811115610a3857610a376108e3565b5b81810290505b9392505050565b600060ff82169050919050565b6000610a5d826106df565b9150610a6883610a45565b9250610a957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610972565b905092915050565b6000610aa8826106df565b9150610ab3836106df565b9250828202610ac1816106df565b91508282048414831517610ad857610ad76108e3565b5b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0a82610adf565b9050919050565b610b1a81610aff565b82525050565b6000602082019050610b356000830184610b11565b92915050565b6000610b46826106df565b9150610b51836106df565b9250828201905080821115610b6957610b686108e3565b5b92915050565b610b78816106df565b82525050565b6000606082019050610b936000830186610b11565b610ba06020830185610b6f565b610bad6040830184610b6f565b949350505050565b6000602082019050610bca6000830184610b6f565b92915050565b60805160a05161240e610c006000396000818161062901528181610b940152610c2201526000505061240e6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063b7dfcbee1161007c578063b7dfcbee146103c8578063d547741f146103e4578063dd62ed3e14610400578063ed49564214610430578063f0dda65c1461044e578063f7be43fb1461046a5761014d565b806370a08231146102de57806391d148541461030e578063926a694d1461033e57806395d89b411461035c578063a217fddf1461037a578063a9059cbb146103985761014d565b8063248a9ca311610115578063248a9ca31461021e5780632f2ff15d1461024e578063313ce5671461026a57806331a95c7a1461028857806333039d3d146102a457806336568abe146102c25761014d565b806301ffc9a71461015257806306fdde0314610182578063095ea7b3146101a057806318160ddd146101d057806323b872dd146101ee575b600080fd5b61016c600480360381019061016791906118e5565b610488565b604051610179919061192d565b60405180910390f35b61018a610502565b60405161019791906119d8565b60405180910390f35b6101ba60048036038101906101b59190611a8e565b610594565b6040516101c7919061192d565b60405180910390f35b6101d86105b7565b6040516101e59190611add565b60405180910390f35b61020860048036038101906102039190611af8565b6105c1565b604051610215919061192d565b60405180910390f35b61023860048036038101906102339190611b81565b6105f0565b6040516102459190611bbd565b60405180910390f35b61026860048036038101906102639190611bd8565b610610565b005b61027261071d565b60405161027f9190611c34565b60405180910390f35b6102a2600480360381019061029d9190611af8565b610726565b005b6102ac61087b565b6040516102b99190611add565b60405180910390f35b6102dc60048036038101906102d79190611bd8565b61088b565b005b6102f860048036038101906102f39190611c4f565b6108de565b6040516103059190611add565b60405180910390f35b61032860048036038101906103239190611bd8565b610926565b604051610335919061192d565b60405180910390f35b610346610991565b6040516103539190611bbd565b60405180910390f35b6103646109b5565b60405161037191906119d8565b60405180910390f35b610382610a47565b60405161038f9190611bbd565b60405180910390f35b6103b260048036038101906103ad9190611a8e565b610a4e565b6040516103bf919061192d565b60405180910390f35b6103e260048036038101906103dd9190611db1565b610a71565b005b6103fe60048036038101906103f99190611bd8565b610b7b565b005b61041a60048036038101906104159190611e0d565b610d16565b6040516104279190611add565b60405180910390f35b610438610d9d565b6040516104459190611add565b60405180910390f35b61046860048036038101906104639190611a8e565b610daa565b005b610472610ec1565b60405161047f9190611bbd565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104fb57506104fa82610ee5565b5b9050919050565b60606003805461051190611e7c565b80601f016020809104026020016040519081016040528092919081815260200182805461053d90611e7c565b801561058a5780601f1061055f5761010080835404028352916020019161058a565b820191906000526020600020905b81548152906001019060200180831161056d57829003601f168201915b5050505050905090565b60008061059f610f4f565b90506105ac818585610f57565b600191505092915050565b6000600254905090565b6000806105cc610f4f565b90506105d9858285610f69565b6105e4858585610ffe565b60019150509392505050565b600060056000838152602001908152602001600020600101549050919050565b6000801b61061d816110f2565b6000801b830361070e577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ac90611f1f565b60405180910390fd5b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b6107188383611106565b505050565b60006012905090565b6000801b610733816110f2565b61075d7fc951d7098b66ba0b8b77265b6e9cf0e187d73125a42bcd0061b09a68be42181085610926565b61079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390611f8b565b60405180910390fd5b6107c67f0aaf57387812c7f832412470a57567b5648a930069be49aa9c98d04f88520d3484610926565b610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90611ff7565b60405180910390fd5b610810848484610ffe565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f2e33fa1fb3bd944a8fefd70eebd6988e59d5c1f348a896213c16b5c5caf049928460405161086d9190611add565b60405180910390a350505050565b6b033b2e3c9fd0803ce800000081565b6000801b82036108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790612063565b60405180910390fd5b6108da8282611128565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006005600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f0aaf57387812c7f832412470a57567b5648a930069be49aa9c98d04f88520d3481565b6060600480546109c490611e7c565b80601f01602080910402602001604051908101604052809291908181526020018280546109f090611e7c565b8015610a3d5780601f10610a1257610100808354040283529160200191610a3d565b820191906000526020600020905b815481529060010190602001808311610a2057829003601f168201915b5050505050905090565b6000801b81565b600080610a59610f4f565b9050610a66818585610ffe565b600191505092915050565b6000801b610a7e816110f2565b7fc951d7098b66ba0b8b77265b6e9cf0e187d73125a42bcd0061b09a68be421810828051906020012003610adc57610ad67fc951d7098b66ba0b8b77265b6e9cf0e187d73125a42bcd0061b09a68be421810846111a3565b50610b76565b7f0aaf57387812c7f832412470a57567b5648a930069be49aa9c98d04f88520d34828051906020012003610b3a57610b347f0aaf57387812c7f832412470a57567b5648a930069be49aa9c98d04f88520d34846111a3565b50610b75565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c906120cf565b60405180910390fd5b5b505050565b6000801b610b88816110f2565b6000801b8303610d07577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1790612161565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca5906121f3565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b610d118383611295565b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b683635c9adc5dea0000081565b6000801b610db7816110f2565b683635c9adc5dea00000821115610e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfa9061225f565b60405180910390fd5b6b033b2e3c9fd0803ce800000082610e196105b7565b610e2391906122ae565b1115610e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5b9061232e565b60405180910390fd5b610e6e83836112b7565b8273ffffffffffffffffffffffffffffffffffffffff167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a427383604051610eb49190611add565b60405180910390a2505050565b7fc951d7098b66ba0b8b77265b6e9cf0e187d73125a42bcd0061b09a68be42181081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b610f648383836001611339565b505050565b6000610f758484610d16565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610ff85781811015610fe8578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610fdf9392919061235d565b60405180910390fd5b610ff784848484036000611339565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110705760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016110679190612394565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110e25760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016110d99190612394565b60405180910390fd5b6110ed838383611510565b505050565b611103816110fe610f4f565b611735565b50565b61110f826105f0565b611118816110f2565b61112283836111a3565b50505050565b611130610f4f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611194576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61119e8282611786565b505050565b60006111af8383610926565b61128a5760016005600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611227610f4f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061128f565b600090505b92915050565b61129e826105f0565b6112a7816110f2565b6112b18383611786565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113295760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016113209190612394565b60405180910390fd5b61133560008383611510565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036113ab5760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016113a29190612394565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361141d5760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016114149190612394565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550801561150a578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516115019190611add565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361156257806002600082825461155691906122ae565b92505081905550611635565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156115ee578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016115e59392919061235d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361167e57806002600082825403925050819055506116cb565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117289190611add565b60405180910390a3505050565b61173f8282610926565b6117825780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016117799291906123af565b60405180910390fd5b5050565b60006117928383610926565b1561186e5760006005600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061180b610f4f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611873565b600090505b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118c28161188d565b81146118cd57600080fd5b50565b6000813590506118df816118b9565b92915050565b6000602082840312156118fb576118fa611883565b5b6000611909848285016118d0565b91505092915050565b60008115159050919050565b61192781611912565b82525050565b6000602082019050611942600083018461191e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611982578082015181840152602081019050611967565b60008484015250505050565b6000601f19601f8301169050919050565b60006119aa82611948565b6119b48185611953565b93506119c4818560208601611964565b6119cd8161198e565b840191505092915050565b600060208201905081810360008301526119f2818461199f565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a25826119fa565b9050919050565b611a3581611a1a565b8114611a4057600080fd5b50565b600081359050611a5281611a2c565b92915050565b6000819050919050565b611a6b81611a58565b8114611a7657600080fd5b50565b600081359050611a8881611a62565b92915050565b60008060408385031215611aa557611aa4611883565b5b6000611ab385828601611a43565b9250506020611ac485828601611a79565b9150509250929050565b611ad781611a58565b82525050565b6000602082019050611af26000830184611ace565b92915050565b600080600060608486031215611b1157611b10611883565b5b6000611b1f86828701611a43565b9350506020611b3086828701611a43565b9250506040611b4186828701611a79565b9150509250925092565b6000819050919050565b611b5e81611b4b565b8114611b6957600080fd5b50565b600081359050611b7b81611b55565b92915050565b600060208284031215611b9757611b96611883565b5b6000611ba584828501611b6c565b91505092915050565b611bb781611b4b565b82525050565b6000602082019050611bd26000830184611bae565b92915050565b60008060408385031215611bef57611bee611883565b5b6000611bfd85828601611b6c565b9250506020611c0e85828601611a43565b9150509250929050565b600060ff82169050919050565b611c2e81611c18565b82525050565b6000602082019050611c496000830184611c25565b92915050565b600060208284031215611c6557611c64611883565b5b6000611c7384828501611a43565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cbe8261198e565b810181811067ffffffffffffffff82111715611cdd57611cdc611c86565b5b80604052505050565b6000611cf0611879565b9050611cfc8282611cb5565b919050565b600067ffffffffffffffff821115611d1c57611d1b611c86565b5b611d258261198e565b9050602081019050919050565b82818337600083830152505050565b6000611d54611d4f84611d01565b611ce6565b905082815260208101848484011115611d7057611d6f611c81565b5b611d7b848285611d32565b509392505050565b600082601f830112611d9857611d97611c7c565b5b8135611da8848260208601611d41565b91505092915050565b60008060408385031215611dc857611dc7611883565b5b6000611dd685828601611a43565b925050602083013567ffffffffffffffff811115611df757611df6611888565b5b611e0385828601611d83565b9150509250929050565b60008060408385031215611e2457611e23611883565b5b6000611e3285828601611a43565b9250506020611e4385828601611a43565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e9457607f821691505b602082108103611ea757611ea6611e4d565b5b50919050565b7f4f6e6c79206f726967696e616c2061646d696e2063616e206772616e7420616460008201527f6d696e20726f6c65000000000000000000000000000000000000000000000000602082015250565b6000611f09602883611953565b9150611f1482611ead565b604082019050919050565b60006020820190508181036000830152611f3881611efc565b9050919050565b7f496e76616c69642073747564656e740000000000000000000000000000000000600082015250565b6000611f75600f83611953565b9150611f8082611f3f565b602082019050919050565b60006020820190508181036000830152611fa481611f68565b9050919050565b7f496e76616c69642076656e646f72000000000000000000000000000000000000600082015250565b6000611fe1600e83611953565b9150611fec82611fab565b602082019050919050565b6000602082019050818103600083015261201081611fd4565b9050919050565b7f43616e6e6f742072656e6f756e63652061646d696e20726f6c65000000000000600082015250565b600061204d601a83611953565b915061205882612017565b602082019050919050565b6000602082019050818103600083015261207c81612040565b9050919050565b7f496e76616c696420726f6c652073706563696669656400000000000000000000600082015250565b60006120b9601683611953565b91506120c482612083565b602082019050919050565b600060208201905081810360008301526120e8816120ac565b9050919050565b7f4f6e6c79206f726967696e616c2061646d696e2063616e207265766f6b65206160008201527f646d696e20726f6c650000000000000000000000000000000000000000000000602082015250565b600061214b602983611953565b9150612156826120ef565b604082019050919050565b6000602082019050818103600083015261217a8161213e565b9050919050565b7f43616e6e6f74207265766f6b65206f726967696e616c2061646d696e20726f6c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006121dd602183611953565b91506121e882612181565b604082019050919050565b6000602082019050818103600083015261220c816121d0565b9050919050565b7f416d6f756e742065786365656473206d6178206d696e74207065722063616c6c600082015250565b6000612249602083611953565b915061225482612213565b602082019050919050565b600060208201905081810360008301526122788161223c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122b982611a58565b91506122c483611a58565b92508282019050808211156122dc576122db61227f565b5b92915050565b7f576f756c6420657863656564206d617820746f74616c20737570706c79000000600082015250565b6000612318601d83611953565b9150612323826122e2565b602082019050919050565b600060208201905081810360008301526123478161230b565b9050919050565b61235781611a1a565b82525050565b6000606082019050612372600083018661234e565b61237f6020830185611ace565b61238c6040830184611ace565b949350505050565b60006020820190506123a9600083018461234e565b92915050565b60006040820190506123c4600083018561234e565b6123d16020830184611bae565b939250505056fea2646970667358221220e4f9116418c1f53a847d4f3505b3a23f6d93faeecefebbf7c9519d4e10ac189e64736f6c634300081e0033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MAX_MINT_PER_CALL = "MAX_MINT_PER_CALL";

    public static final String FUNC_MAX_TOTAL_SUPPLY = "MAX_TOTAL_SUPPLY";

    public static final String FUNC_STUDENT_ROLE = "STUDENT_ROLE";

    public static final String FUNC_VENDOR_ROLE = "VENDOR_ROLE";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_ASSIGNROLE = "assignRole";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_MINTTOKENS = "mintTokens";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_REDEEMTOKENS = "redeemTokens";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TOKENSMINTED_EVENT = new Event("TokensMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENSREDEEMED_EVENT = new Event("TokensRedeemed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected HKUT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HKUT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HKUT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HKUT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleAdminChangedEventResponse getRoleAdminChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
        RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleAdminChangedEventFromLog(log));
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public static List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleGrantedEventResponse getRoleGrantedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, log);
        RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleGrantedEventFromLog(log));
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public static List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleRevokedEventResponse getRoleRevokedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, log);
        RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleRevokedEventFromLog(log));
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public static List<TokensMintedEventResponse> getTokensMintedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENSMINTED_EVENT, transactionReceipt);
        ArrayList<TokensMintedEventResponse> responses = new ArrayList<TokensMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensMintedEventResponse typedResponse = new TokensMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokensMintedEventResponse getTokensMintedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENSMINTED_EVENT, log);
        TokensMintedEventResponse typedResponse = new TokensMintedEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TokensMintedEventResponse> tokensMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokensMintedEventFromLog(log));
    }

    public Flowable<TokensMintedEventResponse> tokensMintedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSMINTED_EVENT));
        return tokensMintedEventFlowable(filter);
    }

    public static List<TokensRedeemedEventResponse> getTokensRedeemedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENSREDEEMED_EVENT, transactionReceipt);
        ArrayList<TokensRedeemedEventResponse> responses = new ArrayList<TokensRedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensRedeemedEventResponse typedResponse = new TokensRedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokensRedeemedEventResponse getTokensRedeemedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENSREDEEMED_EVENT, log);
        TokensRedeemedEventResponse typedResponse = new TokensRedeemedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TokensRedeemedEventResponse> tokensRedeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokensRedeemedEventFromLog(log));
    }

    public Flowable<TokensRedeemedEventResponse> tokensRedeemedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSREDEEMED_EVENT));
        return tokensRedeemedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> MAX_MINT_PER_CALL() {
        final Function function = new Function(FUNC_MAX_MINT_PER_CALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_TOTAL_SUPPLY() {
        final Function function = new Function(FUNC_MAX_TOTAL_SUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> STUDENT_ROLE() {
        final Function function = new Function(FUNC_STUDENT_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> VENDOR_ROLE() {
        final Function function = new Function(FUNC_VENDOR_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> assignRole(String user, String role) {
        final Function function = new Function(
                FUNC_ASSIGNROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.Utf8String(role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final Function function = new Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintTokens(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_MINTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> redeemTokens(String from, String to,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_REDEEMTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role,
            String callerConfirmation) {
        final Function function = new Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, callerConfirmation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static HKUT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new HKUT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HKUT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HKUT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HKUT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new HKUT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HKUT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HKUT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HKUT> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HKUT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<HKUT> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HKUT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<HKUT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(HKUT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<HKUT> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HKUT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        return BINARY;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TokensMintedEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class TokensRedeemedEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger amount;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
